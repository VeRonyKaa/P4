import numpy as np
import scipy.signal as sig
import scipy.io.wavfile as wave

def paramEqFilterCoefficients(digCenterFreq, digBandwidth, gain, level=1):
    if gain == level:
        feedforwardParams = np.array([1, 0, 0])
        feedbackParams = np.array([0, 0])
    else:
        cutoffGain = np.sqrt((gain**2+level**2)/2) # could also be the geometric mean instead
        alpha = np.sqrt((cutoffGain**2-level**2)/(gain**2-cutoffGain**2))*np.tan(digBandwidth/2)
        b0 = (level+gain*alpha)/(1+alpha)
        b1 = -2*level*np.cos(digCenterFreq)/(1+alpha)
        b2 = (level-gain*alpha)/(1+alpha)
        a1 = 2*np.cos(digCenterFreq)/(1+alpha)
        a2 = -(1-alpha)/(1+alpha)
        feedforwardParams = np.array([b0, b1, b2])
        feedbackParams = np.array([a1, a2])
    return feedforwardParams, feedbackParams

def gainSmoothing(gain, attackTime, releaseTime):
    # note that the attack and release times are in samples!
    nData = np.size(gain)
    smoothedGain = np.zeros(nData)
    for n in np.arange(nData):
        if n == 0:
            smoothedGain[n] = gain[n]
        else:
            if gain[n] < smoothedGain[n-1]:
                forgettingFactor = np.exp(-2.2/releaseTime)
            else:
                forgettingFactor = np.exp(-2.2/attackTime)
            smoothedGain[n] = (1-forgettingFactor)*gain[n] + \
                forgettingFactor*smoothedGain[n-1]
    return smoothedGain

def compressorGain(inputLevel, thresholdDb, compressionFactor):
    nData = np.size(inputLevel)
    gain = np.zeros(nData)
    threshold = 10**(thresholdDb/20)
    for n in np.arange(nData):
        if inputLevel[n] <= threshold:
            gain[n] = 1
        else:
            gain[n] = (inputLevel[n]/threshold)**(1/compressionFactor-1)
    return gain

def dynamicRangeCompression(inputSignal, levelForgettingFactor, thresholdDb, compressionFactor, \
                           attackTime, releaseTime):
    #normalise signal so maximum value is 1
    maxVal = np.max(np.abs(inputSignal))
    # level estimation
    signalLevel = expWindowLevelMeasurement(inputSignal/maxVal, levelForgettingFactor)
    # gain computation
    gain = compressorGain(signalLevel, thresholdDb, compressionFactor)
    # gain smoothing
    smoothedGain = gainSmoothing(gain, attackTime, releaseTime)
    return maxVal*smoothedGain*inputSignal

def expWindowLevelMeasurement(inputSignal, forgettingFactor):
    nData = np.size(inputSignal)
    filteredSignalPower = np.zeros(nData)
    inputSignalPower = inputSignal**2
    for n in np.arange(nData):
        if n == 0:
            print( (1-forgettingFactor)*inputSignalPower[7])
            filteredSignalPower[n] = (1-forgettingFactor)*inputSignalPower[0]
        else:
            filteredSignalPower[n] = (1-forgettingFactor)*inputSignalPower[n]+ \
                forgettingFactor*filteredSignalPower[n-1]
    return np.sqrt(filteredSignalPower)


samplingFreq, guitarSignal = wave.read('/Users/veronikanemcova/PycharmProjects/PitchShift/sentence_5.wav')
inputsignal = guitarSignal[:,0]/2**15 # normalise


# compression
levelForgettingFactor = 0.99
thresholdDb = -25 # dB
compressionFactor = 10
attackTime = 5e-4*samplingFreq # samples
releaseTime = 0.05*samplingFreq # samples
compSignal = dynamicRangeCompression(inputsignal, levelForgettingFactor, thresholdDb, compressionFactor, \
    attackTime, releaseTime)

# high pass shelving filter
centerFreq = samplingFreq/2 # Hz - for high shelving filter
cutoffFreq = 8000 # Hz
gain = 1.5
nDtft = 2048
feedforwardParams, feedbackParams = paramEqFilterCoefficients(centerFreq*2*np.pi/samplingFreq, \
    np.pi-cutoffFreq*2*np.pi/samplingFreq, gain)

nData = np.size(inputsignal)
outputSignal = np.zeros(nData)
outputSignal = sig.lfilter(feedforwardParams, np.r_[1,-feedbackParams], compSignal)


print(outputSignal)

wave.write(filename='happy.wav', rate=samplingFreq, data=outputSignal)
