import numpy as np
import scipy.signal as sig
import scipy.io.wavfile as wave

def paramEqFilterCoefficients(digCenterFreq, digBandwidth, gain, level=1):
    if gain == level:
        feedforwardParams = np.array([1, 0, 0])
        feedbackParams = np.array([0, 0])
    else:
        cutoffGain = np.sqrt((gain**2+level**2)/2) # could also be the geometric mean instead
        alpha = np.sqrt((cutoffGain**2-level**2)/(gain**2-cutoffGain**2))*np.tan(digBandwidth/2)
        b0 = (level+gain*alpha)/(1+alpha)
        b1 = -2*level*np.cos(digCenterFreq)/(1+alpha)
        b2 = (level-gain*alpha)/(1+alpha)
        a1 = 2*np.cos(digCenterFreq)/(1+alpha)
        a2 = -(1-alpha)/(1+alpha)
        feedforwardParams = np.array([b0, b1, b2])
        feedbackParams = np.array([a1, a2])
    return feedforwardParams, feedbackParams



samplingFreq, guitarSignal = wave.read('/Users/veronikanemcova/PycharmProjects/PitchShift/sentence_5.wav')
inputsignal = guitarSignal[:,0]/2**15 # normalise
centerFreq = samplingFreq/2 # Hz - for high shelving filter
cutoffFreq = 8000 # Hz
gain = 1.5
nDtft = 2048
feedforwardParams, feedbackParams = paramEqFilterCoefficients(centerFreq*2*np.pi/samplingFreq, \
    np.pi-cutoffFreq*2*np.pi/samplingFreq, gain)

nData = np.size(inputsignal)
outputSignal = np.zeros(nData)
outputSignal = sig.lfilter(feedforwardParams, np.r_[1,-feedbackParams], inputsignal)

print(outputSignal)

wave.write(filename='sad.wav', rate=samplingFreq, data=outputSignal)
